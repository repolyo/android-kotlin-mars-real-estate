// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    ext {
        // Versions for all the dependencies we plan to use. It's particularly useful for kotlin and
        // navigation where the versions of the plugin needs to be the same as the version of the
        // library defined in the app Gradle file
        version_android_gradle_plugin = "3.3.2"
        version_core = "1.0.1"
        version_constraint_layout = "1.1.3"
        version_glide = "4.8.0"
        version_kotlin = "1.3.21"
        version_kotlin_coroutines = "1.1.0"
        version_lifecycle_extensions = "2.0.0"
        version_moshi = "1.8.0"
        version_navigation = "1.0.0"
        version_retrofit = "2.5.0"
        version_retrofit_coroutines_adapter = "0.9.2"
        version_recyclerview = "1.0.0"
    }

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:$version_android_gradle_plugin"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$version_kotlin"
        classpath "android.arch.navigation:navigation-safe-args-gradle-plugin:$version_navigation"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task emulator {

    doLast {
        def params = ['-list-avds']
        def sdkHome = System.env.ANDROID_SDK_ROOT
        if (! sdkHome) {
            println "ERROR: Missing environment variable: ANDROID_SDK_ROOT\n"
            println "ANDROID_SDK_ROOT must be a path pointing to the SDK installation directory"
            println "\$ echo \"export ANDROID_SDK_ROOT=C:\\Android\\Sdk\" >> ~/.bash_profile"
            println "\$ source ~/.bash_profile"
            return
        }
        if (project.hasProperty("avd")) {
            params = ['-avd', String.format("\"%s\"", project.getProperty("avd")),
                      '-dns-server', '8.8.8.8']
        } else {
            println "Usage: gradlew -q emulator -Pavd=<AVD name>"
            println "AVD name:"
        }
        new ByteArrayOutputStream().withStream { os ->
            exec {
                args = params
                workingDir = sdkHome + "/emulator"
                executable = 'emulator'
                standardOutput = os
            }
            def outputAsString = os.toString()
            println(outputAsString)
        }
    }
}